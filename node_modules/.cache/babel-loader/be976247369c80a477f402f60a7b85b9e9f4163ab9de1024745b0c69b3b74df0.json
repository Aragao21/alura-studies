{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flavi\\\\Desktop\\\\Alura\\\\Front-End\\\\React com TypeScript\\\\React - escrevendo com Typescript\\\\alura-studies\\\\src\\\\pages\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Formulario from '../components/Formulario';\nimport Lista from '../components/Lista';\nimport style from './App.module.scss';\nimport Cronometro from '../components/Cronometro';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tarefas, setTarefas] = useState([]);\n  const [selecionado, setSelecionado] = useState();\n  function selecionaTarefa(tarefaSelecionada) {\n    setSelecionado(tarefaSelecionada);\n    setTarefas(tarefasAnteriores => tarefasAnteriores.map(tarefa => ({\n      ...tarefa,\n      selecionado: tarefa.id === tarefaSelecionada.id ? true : false\n    })));\n  }\n  function finalizarTarefa() {\n    if (selecionado) {\n      setSelecionado(undefined);\n      setTarefas(tarefasAnteriores => tarefasAnteriores.map(tarefa => {\n        if (tarefa.id === selecionado.id) {\n          return {\n            ...tarefa,\n            selecionado: false,\n            completado: true\n          };\n        }\n        return tarefa;\n      }));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.AppStyle,\n    children: [/*#__PURE__*/_jsxDEV(Formulario, {\n      setTarefas: setTarefas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Lista, {\n      tarefas: tarefas,\n      selecionaTarefa: selecionaTarefa\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cronometro, {\n      selecionado: selecionado,\n      finalizarTarefa: finalizarTarefa\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UiAgXvemwbYrV6hcTIVH7S4aSzU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Formulario","Lista","style","Cronometro","App","tarefas","setTarefas","selecionado","setSelecionado","selecionaTarefa","tarefaSelecionada","tarefasAnteriores","map","tarefa","id","finalizarTarefa","undefined","completado","AppStyle"],"sources":["C:/Users/flavi/Desktop/Alura/Front-End/React com TypeScript/React - escrevendo com Typescript/alura-studies/src/pages/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Formulario from '../components/Formulario';\nimport Lista from '../components/Lista';\nimport style from './App.module.scss';\nimport Cronometro from '../components/Cronometro';\nimport { ITarefa } from '../types/tarefa';\n\nfunction App() {\n  const [tarefas, setTarefas] = useState<ITarefa[]>([]);\n  const [selecionado, setSelecionado] = useState<ITarefa>();\n\n  function selecionaTarefa(tarefaSelecionada: ITarefa) {\n    setSelecionado(tarefaSelecionada);\n    setTarefas(tarefasAnteriores => tarefasAnteriores.map(tarefa => ({\n      ...tarefa,\n      selecionado: tarefa.id === tarefaSelecionada.id ? true : false \n    })));\n  }\n\n  function finalizarTarefa() {\n    if(selecionado) {\n      setSelecionado(undefined);\n      setTarefas(tarefasAnteriores => tarefasAnteriores.map(tarefa => {\n        if(tarefa.id === selecionado.id) {\n          return {\n            ...tarefa,\n            selecionado: false,\n            completado: true\n          }\n        }\n        return tarefa;\n      }));\n    }\n  }\n\n  return (\n    <div className={style.AppStyle}>\n      <Formulario setTarefas={setTarefas}/>\n      <Lista \n        tarefas={tarefas} \n        selecionaTarefa={selecionaTarefa}\n      />\n      <Cronometro \n        selecionado={selecionado} \n        finalizarTarefa={finalizarTarefa}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAGlD,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAY,EAAE,CAAC;EACrD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,EAAW;EAEzD,SAASU,eAAe,CAACC,iBAA0B,EAAE;IACnDF,cAAc,CAACE,iBAAiB,CAAC;IACjCJ,UAAU,CAACK,iBAAiB,IAAIA,iBAAiB,CAACC,GAAG,CAACC,MAAM,KAAK;MAC/D,GAAGA,MAAM;MACTN,WAAW,EAAEM,MAAM,CAACC,EAAE,KAAKJ,iBAAiB,CAACI,EAAE,GAAG,IAAI,GAAG;IAC3D,CAAC,CAAC,CAAC,CAAC;EACN;EAEA,SAASC,eAAe,GAAG;IACzB,IAAGR,WAAW,EAAE;MACdC,cAAc,CAACQ,SAAS,CAAC;MACzBV,UAAU,CAACK,iBAAiB,IAAIA,iBAAiB,CAACC,GAAG,CAACC,MAAM,IAAI;QAC9D,IAAGA,MAAM,CAACC,EAAE,KAAKP,WAAW,CAACO,EAAE,EAAE;UAC/B,OAAO;YACL,GAAGD,MAAM;YACTN,WAAW,EAAE,KAAK;YAClBU,UAAU,EAAE;UACd,CAAC;QACH;QACA,OAAOJ,MAAM;MACf,CAAC,CAAC,CAAC;IACL;EACF;EAEA,oBACE;IAAK,SAAS,EAAEX,KAAK,CAACgB,QAAS;IAAA,wBAC7B,QAAC,UAAU;MAAC,UAAU,EAAEZ;IAAW;MAAA;MAAA;MAAA;IAAA,QAAE,eACrC,QAAC,KAAK;MACJ,OAAO,EAAED,OAAQ;MACjB,eAAe,EAAEI;IAAgB;MAAA;MAAA;MAAA;IAAA,QACjC,eACF,QAAC,UAAU;MACT,WAAW,EAAEF,WAAY;MACzB,eAAe,EAAEQ;IAAgB;MAAA;MAAA;MAAA;IAAA,QACjC;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV;AAAC,GAzCQX,GAAG;AAAA,KAAHA,GAAG;AA2CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}